name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ master, feature/* ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast syntax and basic checks (fastest feedback)
  quick-check:
    name: Quick Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Lint with clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Syntax check
      run: cargo check --all-targets --all-features

  # Core TDD tests (fastest feedback loop)
  tdd-tests:
    name: TDD Core Tests
    runs-on: ubuntu-latest
    needs: quick-check
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run TDD core tests
      run: make tdd-core
      timeout-minutes: 5

  # Unit and integration tests across Rust versions
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: quick-check
    strategy:
      matrix:
        rust: [stable, beta]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-
    
    - name: Build all targets
      run: cargo build --verbose --all-features
    
    - name: Run all unit tests
      run: cargo test --lib --all-features --verbose
      timeout-minutes: 10
    
    - name: Run example integration tests
      run: cargo test --test example_integration_tests --verbose
      timeout-minutes: 15

  # Example validation tests
  example-tests:
    name: Example Validation
    runs-on: ubuntu-latest
    needs: quick-check
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build consolidated example
      run: |
        cd examples/rpc_system_demo
        cargo build --release
    
    - name: Test demo command (comprehensive feature test)
      run: |
        cd examples/rpc_system_demo
        timeout 60 cargo run demo
      timeout-minutes: 2
    
    - name: Test events demo
      run: |
        cd examples/rpc_system_demo
        timeout 30 cargo run events
      timeout-minutes: 1
    
    - name: Validate all CLI commands exist
      run: |
        cd examples/rpc_system_demo
        cargo run -- --help | grep -E "(demo|server|client|events|publisher|subscriber)"

  # Multi-process communication tests
  multiprocess-tests:
    name: Multi-Process Tests
    runs-on: ubuntu-latest
    needs: [tdd-tests, unit-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run multi-process integration tests
      run: cargo test --test multiprocess_integration_tests --verbose
      timeout-minutes: 20
    
    - name: Run automated multi-process script
      run: make multiprocess
      timeout-minutes: 10

  # Load and performance tests (only on master branch)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, example-tests]
    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run load and performance tests
      run: cargo test --test load_and_performance_tests --release --verbose
      timeout-minutes: 25
    
    - name: Run benchmarks
      run: make bench-quick
      timeout-minutes: 10

  # Cross-platform testing
  cross-platform:
    name: Cross-Platform Tests
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: quick-check
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run core tests on ${{ matrix.os }}
      run: make tdd-core
      timeout-minutes: 8
    
    - name: Test example build on ${{ matrix.os }}
      run: |
        cd examples/rpc_system_demo
        cargo build
      timeout-minutes: 5


  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quick-check
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  # Documentation and coverage (only on master)
  documentation:
    name: Documentation & Coverage
    runs-on: ubuntu-latest
    needs: quick-check
    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Generate documentation
      run: cargo doc --all-features --no-deps
    
    - name: Check documentation links
      run: cargo doc --all-features --no-deps
      env:
        RUSTDOCFLAGS: "-D warnings"
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # Final integration check
  integration-check:
    name: Full Integration Check
    runs-on: ubuntu-latest
    needs: [tdd-tests, unit-tests, example-tests, multiprocess-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run full test suite
      run: make full
      timeout-minutes: 15
    
    - name: Test smart test selection
      run: make smart-test
      timeout-minutes: 5

  # CI success summary
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [tdd-tests, unit-tests, example-tests, multiprocess-tests, cross-platform, integration-check, security-audit]
    if: success()
    steps:
    - name: Mark CI as successful
      run: |
        echo "ðŸŽ‰ All CI checks passed successfully!"
        echo "âœ… Quick checks: passed"
        echo "âœ… TDD tests: passed"
        echo "âœ… Unit/Integration tests: passed"  
        echo "âœ… Example validation: passed"
        echo "âœ… Multi-process tests: passed"
        echo "âœ… Cross-platform tests: passed"
        echo "âœ… Security audit: passed"
        echo "âœ… Full integration: passed"
        echo ""
        echo "ðŸš€ Ready for deployment!"